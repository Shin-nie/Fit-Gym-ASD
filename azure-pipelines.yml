trigger:
  - "*"

pool:
  vmImage: ubuntu-latest

variables:
  FTPS_URL: 'ftps://waws-prod-yt1-067.ftp.azurewebsites.windows.net/site/wwwroot'  # FTPS Endpoint
  FTP_USERNAME: 'gym\$gym'  # FTPS Username
  # Make sure FTP_PASSWORD is stored as a secret in Azure DevOps

stages:
- stage: BuildAndDeploy
  jobs:
  - job: BuildAndDeploy
    pool:
      vmImage: ubuntu-latest
    steps:
    # Install Node.js
    - task: NodeTool@0
      inputs:
        versionSpec: "18.x"
      displayName: "Install Node.js"

    # Install frontend dependencies and build
    - script: |
        npm install
        npm run build
      workingDirectory: ./FrontEnd
      displayName: "Install and build Frontend"

    # Copy built frontend (dist) to backend public directory
    - script: |
        mkdir -p ./BackEnd/public
        cp -r ./FrontEnd/dist/* ./BackEnd/public/
      displayName: "Copy Frontend build to Backend public directory"

    # Install backend dependencies
    - script: |
        npm install
      workingDirectory: ./BackEnd
      displayName: "Install Backend dependencies"

    # Create a ZIP archive of the Backend directory, including frontend build files
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/BackEnd'  # Path to backend folder with public
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/backend.zip'  # Output zip file path
        verbose: true
      displayName: "Archive Backend and Frontend build into ZIP"

    # Upload the ZIP file to Azure App Service via FTP
    - task: FtpUpload@2
      inputs:
        credentialsOption: 'inputs'
        serverUrl: '$(FTPS_URL)'  # FTPS URL
        username: '$(FTP_USERNAME)'  # FTPS Username
        password: '$(FTP_PASSWORD)'  # Use secret variable from Azure DevOps
        rootDirectory: '$(Build.ArtifactStagingDirectory)'  # Path where ZIP is located
        filePatterns: 'backend.zip'  # Upload only the ZIP file
        remoteDirectory: '/site/wwwroot'  # Target root directory in App Service
        clean: true  # Clears out the target folder before uploading
        overwrite: true
      displayName: 'FTP Upload ZIP to Azure App Service'

    # Unzip the archive on the server using a custom Kudu script
    - script: |
        curl -X POST "https://gym.scm.azurewebsites.net/api/command" -u "$FTP_USERNAME:$FTP_PASSWORD" \
        -d '{ "command": "unzip /site/wwwroot/backend.zip -d /site/wwwroot" }'
      displayName: "Unzip deployment on Azure"
